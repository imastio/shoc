<?xml version="1.0" encoding="utf-8" ?>

<DataOperations xmlns="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:noNamespaceSchemaLocation="DataOps.xsd">

  <!-- The configuration applies to any operation in this file. Using global timeout for 5 minutes -->
  <DataConfiguration Timeout="PT5M" AutoTransaction="RepeatableRead" Compatibility="MySQL"/>

  <OperationGroup Name="Job">

    <SqlOperation Name="GetAll">
      <TextCommand>
        SELECT * FROM `job_jobs`
        WHERE `WorkspaceId` = @WorkspaceId
        ORDER BY `LocalId` DESC;
      </TextCommand>
    </SqlOperation>

    <SqlOperation Name="GetExtendedPageBy">
      <TextCommand>
        SELECT j.*, w.Name as WorkspaceName, u.FullName as UserFullName, c.Name as ClusterName
        FROM `job_jobs` j
        INNER JOIN `wspc_workspaces` w
        ON j.WorkspaceId = w.Id
        INNER JOIN `idp_users` u
        ON j.UserId = u.Id
        INNER JOIN `clstr_clusters` c
        ON j.ClusterId = c.Id
        WHERE j.`WorkspaceId` = @WorkspaceId
        {if:ByUser {AND j.UserId = @UserId} else {}}
        {if:ByScope {AND j.`Scope` = @Scope} else {}}
        {if:ByStatus {AND j.`Status` = @Status} else {}}
        {if:ByCluster {AND j.`ClusterId` = @ClusterId} else {}}
        ORDER BY j.`Updated` DESC
        LIMIT @Offset, @Count;
      </TextCommand>
    </SqlOperation>

    <SqlOperation Name="CountBy">
      <TextCommand>
        SELECT COUNT(j.Id) as TotalCount
        FROM `job_jobs` j
        WHERE j.`WorkspaceId` = @WorkspaceId
        {if:ByUser {AND j.UserId = @UserId} else {}}
        {if:ByScope {AND j.`Scope` = @Scope} else {}}
        {if:ByScope {AND j.`Status` = @Status} else {}}
        {if:ByCluster {AND j.`ClusterId` = @ClusterId} else {}}
        ORDER BY j.`Updated` DESC;
      </TextCommand>
    </SqlOperation>

    <SqlOperation Name="GetById">
      <TextCommand>
        SELECT * FROM `job_jobs`
        WHERE `WorkspaceId` = @WorkspaceId AND `Id` = @Id;
      </TextCommand>
    </SqlOperation>

    <SqlOperation Name="GetExtendedById">
      <TextCommand>
        SELECT j.*, w.Name as WorkspaceName, u.FullName as UserFullName, c.Name as ClusterName
        FROM `job_jobs` j
        INNER JOIN `wspc_workspaces` w
        ON j.WorkspaceId = w.Id
        INNER JOIN `idp_users` u
        ON j.UserId = u.Id
        INNER JOIN `clstr_clusters` c
        ON j.ClusterId = c.Id
        WHERE j.`WorkspaceId` = @WorkspaceId AND j.`Id` = @Id;
      </TextCommand>
    </SqlOperation>

    <SqlOperation Name="GetTasksById">
      <TextCommand>
        SELECT * FROM `job_job_tasks`
        WHERE `WorkspaceId` = @WorkspaceId AND `JobId` = @Id;
      </TextCommand>
    </SqlOperation>
    
    <SqlOperation Name="Create" AutoTransaction="No">

      <TextCommand>

        INSERT INTO `job_identity_states` 
        (WorkspaceId, ObjectType, Identity)
        VALUES 
        (@WorkspaceId, @JobIdentityType, 1)
        ON DUPLICATE KEY UPDATE `Identity` = `Identity` + 1;

        SET @nextLocalId = (
          SELECT `Identity` 
          FROM job_identity_states
          WHERE `WorkspaceId` = @WorkspaceId AND `ObjectType` = @JobIdentityType
        );
        
        INSERT INTO `job_jobs`
        (`Id`, `WorkspaceId`, `LocalId`, `ClusterId`, `UserId`, `Scope`, `Manifest`, `ClusterConfigEncrypted`, `Namespace`, 
        `TotalTasks`, `SucceededTasks`, `FailedTasks`, `CancelledTasks`, `CompletedTasks`, `Status`, `Message`, `PendingAt`, `RunningAt`, `CompletedAt`)
        VALUES
        (@Id, @WorkspaceId, @nextLocalId, @ClusterId, @UserId, @Scope, @Manifest, @ClusterConfigEncrypted, @Namespace,
        @TotalTasks, @SucceededTasks, @FailedTasks, @CancelledTasks, @CompletedTasks, @Status, @Message, @PendingAt, @RunningAt, @CompletedAt);

        SELECT * FROM `job_jobs`
        WHERE `WorkspaceId` = @WorkspaceId AND `Id` = @Id;
      </TextCommand>

    </SqlOperation>

    <SqlOperation Name="CreateTask" AutoTransaction="No">

      <TextCommand>

        INSERT INTO `job_job_tasks`
        (`Id`, `WorkspaceId`, `JobId`, `Sequence`, `ClusterId`, `PackageId`, `UserId`, `Type`, `Runtime`, `Args`, `PackageReferenceEncrypted`,
        `ArrayReplicas`, `ArrayIndexer`, `ArrayCounter`, `ResolvedEnvEncrypted`, `MemoryRequested`, `CpuRequested`, `NvidiaGpuRequested`, 
        `AmdGpuRequested`, `Spec`, `Status`, `Message`, `PendingAt`, `RunningAt`, `CompletedAt`)
        VALUES
        (@Id, @WorkspaceId, @JobId, @Sequence, @ClusterId, @PackageId, @UserId, @Type, @Runtime, @Args, @PackageReferenceEncrypted,
        @ArrayReplicas, @ArrayIndexer, @ArrayCounter, @ResolvedEnvEncrypted, @MemoryRequested, @CpuRequested, @NvidiaGpuRequested,
        @AmdGpuRequested, @Spec, @Status, @Message, @PendingAt, @RunningAt, @CompletedAt);
        
      </TextCommand>

    </SqlOperation>

    <SqlOperation Name="CreateLabel" AutoTransaction="No">

      <TextCommand>

        INSERT INTO `job_job_labels`
        (`Id`, `WorkspaceId`, `JobId`, `LabelId`)
        VALUES
        (@Id, @WorkspaceId, @JobId, @LabelId)
        ON DUPLICATE KEY UPDATE `LabelId` = @LabelId; 
        
      </TextCommand>

    </SqlOperation>

    <SqlOperation Name="CreateGitRepo" AutoTransaction="No">

      <TextCommand>

        INSERT INTO `job_job_git_repositories`
        (`Id`, `WorkspaceId`, `JobId`, `GitRepoId`)
        VALUES
        (@Id, @WorkspaceId, @JobId, @GitRepoId)
        ON DUPLICATE KEY UPDATE `GitRepoId` = @GitRepoId;

      </TextCommand>

    </SqlOperation>

    <SqlOperation Name="UpdateNamespaceById" AutoTransaction="No">

      <TextCommand>
        UPDATE `job_jobs`
        SET
          `Namespace` = @Namespace
        WHERE `WorkspaceId` = @WorkspaceId AND `Id` = @Id;
        
        SELECT * FROM `job_jobs`
        WHERE `WorkspaceId` = @WorkspaceId AND `Id` = @Id;
      </TextCommand>

    </SqlOperation>

    <SqlOperation Name="FailById">

      <TextCommand>
        UPDATE `job_jobs`
        SET
        `Message` = @Message,
        `CompletedAt` = @CompletedAt,
        `Status` = @Status,
        `SucceededTasks` = 0,
        `CancelledTasks` = 0,
        `FailedTasks` = `TotalTasks`,
        `CompletedTasks` = `TotalTasks`
        WHERE `WorkspaceId` = @WorkspaceId AND `Id` = @Id;

        UPDATE `job_job_tasks`
        SET
        `Status` = @TaskStatus,
        `CompletedAt` = @CompletedAt,
        `Message` = @Message
        WHERE `WorkspaceId` = @WorkspaceId AND `JobId` = @Id;
        
        SELECT * FROM `job_jobs`
        WHERE `WorkspaceId` = @WorkspaceId AND `Id` = @Id;
      </TextCommand>

    </SqlOperation>

    <SqlOperation Name="DeleteById">
      <TextCommand>
        SELECT * FROM `job_jobs` WHERE `WorkspaceId` = @WorkspaceId AND `Id` = @Id;
        DELETE FROM `job_jobs` WHERE `WorkspaceId` = @WorkspaceId AND `Id` = @Id;
      </TextCommand>
    </SqlOperation>
    
  </OperationGroup>

</DataOperations>